@inject HttpClient Http
<div class="answer-form">

    <div class="table">

        <div class="row">

            <div class="header cell"></div>

            @foreach (var option in this.Options)
            {
                <div class="header cell">A@(option)</div>
            }
        </div>

        @foreach (var answer in this.Answers)
        {
            var name = $"Q{answer.Q}";

            <MudRadioGroup @key="name" @bind-Value="answer.Value">
                <div class="row">
                    <div class="cell">@(name).</div>
                    @foreach (var option in this.Options)
                    {
                        <div @key="option" class="cell">
                            <MudRadio T="int?" Value="option" Color="Color.Primary" />
                        </div>
                    }
                </div>
            </MudRadioGroup>
        }
    </div>

    <div>
        <MudButton OnClick="SendAnswers"
                   Disabled="!Filled"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Size="Size.Large"
                   EndIcon="@Icons.Material.Filled.Send">
            Send Answer
        </MudButton>
    </div>

</div>

@if (CountOfTrial > 0)
{
    <div id="status-pane">
        @if (NumOfCorrect == Answers.Length)
        {
            <div id="congratulation-msg">
                Congratulation!
            </div>
        }
        <div>
            <span>@NumOfCorrect</span> answers are correct.
        </div>
        <div>
            You tried @CountOfTrial time(s).
        </div>
    </div>
}

@code
{
    string ServerUrl = "https://chomado-problem-server.azurewebsites.net/";

    int[] Options = new[] { 1, 2, 3, 4 };

    Answer[] Answers = Enumerable.Range(1, 10).Select(n => new Answer { Q = n }).ToArray();

    int NumOfCorrect = 0;

    int CountOfTrial = 0;

    bool Filled => this.Answers.All(a => a.Value != null);

    [Parameter]
    public EventCallback<bool> OnSendingStatusChanged { get; set; }

    async Task SendAnswers()
    {
        var answersValues = this.Answers.Select(a => a.Value);

        await this.OnSendingStatusChanged.InvokeAsync(true);
        try
        {
            var apiUrl = this.ServerUrl + "answer";
            var response = await this.Http.PostAsJsonAsync(apiUrl, answersValues);
            this.NumOfCorrect = await response.Content.ReadFromJsonAsync<int>();
            this.CountOfTrial++;
        }
        finally
        {
            await this.OnSendingStatusChanged.InvokeAsync(false);
        }
    }
}
